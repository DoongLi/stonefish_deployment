<launch>
    <!-- Configurable arguments -->
    <arg name="robot_name" default="girona500"/>
    <arg name="enable_keyboard" default="false"/>
    <arg name="enable_joystick" default="true"/>
    <arg name="joystick_device" default="/dev/input/js0"/>
    <arg name="enable_gui" default="true"/>
    <arg name="enable_rviz" default="true"/> 

    <!-- Static transform -->
    <node name="world2ned" pkg="tf" type="static_transform_publisher" args="0 0 0 0 0 3.1415 world world_ned 100"/>

    <!-- Namespace with robot name -->
    <group ns="$(arg robot_name)">
        <!-- Load configs (do not modify) -->
        <include file="$(find cola2_girona500)/launch/sim_girona500_configs.launch">
            <arg name="robot_name" value="$(arg robot_name)"/>
        </include>

        <!-- ################################################################################## -->
        <!-- Override configs here-->
        <!-- ################################################################################## -->
        
        <!-- Load core -->
        <!-- Safety nodes -->
        <node name="cola2_watchdog" pkg="cola2_safety" type="cola2_watchdog.py" output="screen"/>
        <node name="recovery_actions" pkg="cola2_safety" type="recovery_actions.py" output="screen"/>
        <node name="safe_depth_altitude" pkg="cola2_safety" type="safe_depth_altitude.py" output="screen"/>
        <node name="safety_supervisor" pkg="cola2_safety" type="safety_supervisor.py" output="screen"/>
        <node name="set_zero_velocity" pkg="cola2_safety" type="set_zero_velocity.py" output="screen"/>
        <node name="virtual_cage" pkg="cola2_safety" type="virtual_cage.py" output="screen"/>
        <node name="diagnostic_aggregator" pkg="diagnostic_aggregator" type="aggregator_node">
            <remap from="/diagnostics" to="/$(arg robot_name)/diagnostics"/>
            <remap from="/diagnostics_agg" to="/$(arg robot_name)/diagnostics_agg"/>
            <remap from="/diagnostics_toplevel_state" to="/$(arg robot_name)/diagnostics_toplevel_state"/>
        </node>
        <node name="vehicle_status_parser" pkg="cola2_safety" type="vehicle_status_parser.py" respawn="true" output="screen"/>
        <node name="param_logger" pkg="cola2_log" type="param_logger.py" output="screen"/>
        <node name="computer_logger" pkg="cola2_log" type="computer_logger.py" respawn="true" output="screen"/>
        <node name="sim_internal_sensors" pkg="cola2_sim" type="sim_internal_sensors.py" output="screen"/>
        
        <!-- Navigation -->
        <node name="navigator" pkg="cola2_nav" type="navigator" output="screen"/>

        <!-- Control stack -->
        <node name="controller" pkg="cola2_control" type="controller_only_thrusters"/>
        <node name="pilot" pkg="cola2_control" type="pilot" output="screen"/>
        <node name="captain" pkg="cola2_control" type="captain" output="screen">
            <param name="vehicle_config_launch_mission_package" value="cola2_$(arg robot_name)"/>
        </node>
        <node name="teleoperation" pkg="cola2_control" type="teleoperation_node.py" output="screen"/>

        <!-- Log -->
        <node name="bag_node" pkg="cola2_log" type="bag_node.py" output="screen"/>
        <node respawn="true" pkg="cola2_log" type="default_param_handler.py" name="default_param_handler" output="screen">
            <param name="config_folder" value="sim_config"/>
        </node>

        <!-- Keyboard -->
        <group if="$(arg enable_keyboard)">
            <node pkg="cola2_control" type="keyboard" name="keyboard"/>
            <node pkg="cola2_control" type="keyboard_to_teleoperation_node.py" name="keyboard_to_teleoperation"/>
        </group>

        <!-- Joystick -->
        <group if="$(arg enable_joystick)">
            <node respawn="true" pkg="joy" type="joy_node" name="joystick">
                <param name="dev" value="$(arg joystick_device)"/>
                <param name="deadzone" value="0.05"/>
            </node>
            <node respawn="false" pkg="cola2_control" type="logitech_fx10_to_teleoperation_node.py" name="fx10_to_teleoperation"/>
        </group>

        <!-- Throttle messages -->
        <node name="nav_sts_throttle" pkg="topic_tools" type="throttle" args="messages navigator/navigation 4.0"/>
        <node name="odometry_throttle" pkg="topic_tools" type="throttle" args="messages navigator/odometry 4.0"/>
        <node name="merged_wwr_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_world_waypoint_req 2.0"/>
        <node name="merged_bvr_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_body_velocity_req 2.0"/>
        <node name="merged_bfr_throttle" pkg="topic_tools" type="throttle" args="messages controller/merged_body_force_req 2.0"/>
        <node name="thruster_setpoints_throttle" pkg="topic_tools" type="throttle" args="messages controller/thruster_setpoints 4.0"/>

        <!-- GUI mission interface -->
        <group if="$(arg enable_gui)">
            <include file="$(find rosbridge_server)/launch/rosbridge_tcp.launch">
                <arg name="port" value="9091"/>
            </include>
            <node name="rosbridge_websocket" pkg="rosbridge_server" type="rosbridge_websocket" output="screen">
                <param name="authenticate" value="false" />
                <param name="port" value="9090"/>
                <param name="address" value=""/>
                <param name="retry_startup_delay" value="5"/>
                <param name="fragment_timeout" value="600"/>
                <param name="delay_between_messages" value="0"/>
                <param name="max_message_size" value="None"/>
                <param name="unregister_timeout" value="10"/>
                <param name="topics_glob" value="[*]"/>
                <param name="services_glob" value="[*]"/>
                <param name="params_glob" value="[*]"/>
                <param name="bson_only_mode" value="false"/>
            </node>
        </group>

        <!-- Run Simulator -->
        <node name="girona500_auv_dynamics" pkg="stonefish_ros" type="girona500_auv_dynamics" args="$(find stonefish_ros)/data/" output="screen"/>

        <!-- RViz -->
        <node if="$(arg enable_rviz)" pkg="rviz" type="rviz" name="rviz" args="-d $(find cola2_girona500)/scene/sim_girona500.rviz"/>
    </group>
</launch>
